name: Prch
on:
  push:
    branches-ignore:
      - '*WIP'

env:
  CODEQL_ENABLE_EXPERIMENTAL_FEATURES_SWIFT: true

jobs:
  build-ubuntu:
    name: Build on Ubuntu
    env:
      SWIFT_VER: ${{ matrix.swift-version }}
    runs-on: ${{ matrix.runs-on }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        runs-on: [ubuntu-20.04, ubuntu-22.04]
        swift-version: [5.7.3, 5.8]
    steps:
      - uses: actions/checkout@v3
      - name: Set Ubuntu Release DOT
        run: echo "RELEASE_DOT=$(lsb_release -sr)" >> $GITHUB_ENV
      - name: Set Ubuntu Release NUM
        run: echo "RELEASE_NUM=${RELEASE_DOT//[-._]/}"  >> $GITHUB_ENV
      - name: Set Ubuntu Codename
        run: echo "RELEASE_NAME=$(lsb_release -sc)"  >> $GITHUB_ENV
      - name: Cache swift package modules
        id: cache-spm-linux
        uses: actions/cache@v3
        env:
          cache-name: cache-spm
        with:
          path: .build
          key: ${{ runner.os }}-${{ env.RELEASE_DOT }}-${{ env.cache-name }}-${{ matrix.swift-version }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.RELEASE_DOT }}-${{ env.cache-name }}-${{ matrix.swift-version }}-
            ${{ runner.os }}-${{ env.RELEASE_DOT }}-${{ env.cache-name }}-
      - name: Cache swift
        id: cache-swift-linux
        uses: actions/cache@v3
        env:
          cache-name: cache-swift
        with:
          path: swift-${{ env.SWIFT_VER }}-RELEASE-ubuntu${{ env.RELEASE_DOT }}
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.swift-version }}-${{ env.RELEASE_DOT }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.swift-version }}-
      - name: Download Swift
        if: steps.cache-swift-linux.outputs.cache-hit != 'true'
        run: curl -O https://download.swift.org/swift-${SWIFT_VER}-release/ubuntu${RELEASE_NUM}/swift-${SWIFT_VER}-RELEASE/swift-${SWIFT_VER}-RELEASE-ubuntu${RELEASE_DOT}.tar.gz
      - name: Extract Swift
        if: steps.cache-swift-linux.outputs.cache-hit != 'true'
        run: tar xzf swift-${SWIFT_VER}-RELEASE-ubuntu${RELEASE_DOT}.tar.gz
      - name: Add Path
        run: echo "$GITHUB_WORKSPACE/swift-${SWIFT_VER}-RELEASE-ubuntu${RELEASE_DOT}/usr/bin" >> $GITHUB_PATH
      - name: Build
        run: swift build
      - name: Test
        run: swift test --enable-code-coverage
      - uses: sersoft-gmbh/swift-coverage-action@v3
        with:
          fail-on-empty-output: true
      - name: Upload package coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          flags: spm,swift-${{ matrix.swift-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
  build-macos:
    name: Build on macOS
    runs-on: ${{ matrix.runs-on }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        include:
          - runs-on: macos-12
            xcode: "/Applications/Xcode_14.0.1.app"
            iOSVersion: "16.0"
            watchOSVersion: "9.0"
            watchName: "Apple Watch Series 8 (41mm)"
            iPhoneName: "iPhone 12"
          - runs-on: macos-12
            xcode: "/Applications/Xcode_14.1.app"
            iOSVersion: "16.1"
            watchOSVersion: "9.1"
            watchName: "Apple Watch Ultra (49mm)"
            iPhoneName: "iPhone 13"
          - runs-on: macos-12
            xcode: "/Applications/Xcode_14.2.app"
            iOSVersion: "16.2"
            watchOSVersion: "9.1"
            watchName: "Apple Watch Ultra (49mm)"
            iPhoneName: "iPhone 14"
          - runs-on: macos-13
            xcode: "/Applications/Xcode_14.3.app"
            iOSVersion: "16.4"
            watchOSVersion: "9.4"
            watchName: "Apple Watch Ultra (49mm)"
            iPhoneName: "iPhone 14 Pro Max"
    steps:
      - uses: actions/checkout@v3
      - name: Cache swift package modules
        id: cache-spm-macos
        uses: actions/cache@v3
        env:
          cache-name: cache-spm
        with:
          path: .build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.xcode }}-${{ hashFiles('Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.xcode }}-
      - name: Cache mint
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
        id: cache-mint
        uses: actions/cache@v3
        env:
          cache-name: cache-mint
        with:
          path: .mint
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Set Xcode Name
        run: echo "XCODE_NAME=$(basename -- ${{ matrix.xcode }} | sed 's/\.[^.]*$//' | cut -d'_' -f2)" >> $GITHUB_ENV
      - name: Setup Xcode
        run: sudo xcode-select -s ${{ matrix.xcode }}/Contents/Developer
      - name: Install mint
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
        run: |
          brew update
          brew install mint
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Build
        run: swift build
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      - name: Run Swift Package tests
        run: swift test -v --enable-code-coverage
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
      - uses: sersoft-gmbh/swift-coverage-action@v2
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
      - name: Upload SPM coverage to Codecov
        uses: codecov/codecov-action@v2
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
        with:
          fail_ci_if_error: true
          flags: spm
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Lint
        run: ./scripts/lint.sh
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
      - name: Dump PIF
        #if: startsWith(matrix.xcode,'/Applications/Xcode_14')
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
        run: |
          swift package dump-pif > /dev/null
          MAX_ATTEMPT=3
          ATTEMPT=0
          while [ -z $SUCCESS ] && [ "$ATTEMPT" -le "$MAX_ATTEMPT" ]; do
            xcodebuild clean -scheme Prch -destination 'generic/platform=iOS' | grep -q "CLEAN SUCCEEDED" && SUCCESS=true
            ATTEMPT=$(($ATTEMPT+1))
          done
      - name: Run iOS target tests
        run: xcodebuild test -scheme Prch-Package -sdk iphonesimulator -destination 'platform=iOS Simulator,name=${{ matrix.iPhoneName }},OS=${{ matrix.iOSVersion }}' -enableCodeCoverage YES build test
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
      - uses: sersoft-gmbh/swift-coverage-action@v3
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
        with:
          fail-on-empty-output: true
      - name: Upload iOS coverage to Codecov
        uses: codecov/codecov-action@v3
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
        with:
          fail_ci_if_error: true
          flags: iOS,iOS-${{ matrix.iOSVersion }}
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Run watchOS target tests
        run: xcodebuild build -scheme Prch-Package -sdk watchsimulator -destination 'platform=watchOS Simulator,name=${{ matrix.watchName }},OS=${{ matrix.watchOSVersion }}'
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
      - uses: sersoft-gmbh/swift-coverage-action@v3
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
        with:
          fail-on-empty-output: true
      - name: Upload watchOS coverage to Codecov
        if: startsWith(matrix.xcode,'/Applications/Xcode_14.3')
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          flags: watchOS,watchOS${{ matrix.watchOSVersion }}
          token: ${{ secrets.CODECOV_TOKEN }}
